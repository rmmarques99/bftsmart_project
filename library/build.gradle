plugins {
	id 'java'
	id 'distribution'
	id 'org.hidetake.ssh' version '2.10.1'
}

group 'BFT-SMaRt'
version '2.0'

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(21))
    }
}

repositories {
	mavenCentral()
}

jar {
    archiveBaseName.set('BFT-SMaRt')  // Corrige o nome do JAR
    archiveVersion.set("")            // Remove a versão do nome do JAR (se necessário)
}


ssh.settings {
	fileTransfer = 'scp'
}

remotes {
	master {
		//Create a gradle.properties and set the following properties: remoteDeployMasterHost, remoteDeployMasterUser,
		// remoteDeployMasterPrivateKeyFile
		if (project.hasProperty("remoteDeployMasterHost")) {
			host = remoteDeployMasterHost
		}
		if (project.hasProperty("remoteDeployMasterUser")) {
			user = remoteDeployMasterUser
		}
		if (project.hasProperty("remoteDeployMasterPrivateKeyFile")) {
			identity = file(remoteDeployMasterPrivateKeyFile)
		}
	}
}

task remoteDeploy(dependsOn: installDist) {
	doLast {
		def fileSeparator = System.getProperty("file.separator")
		def src = project.buildDir.name + fileSeparator + "install" + fileSeparator + project.name
		def target = '~/'
		ssh.run {
			session(remotes.master) {
				put from: src, into: target
			}
		}
	}
}

task localDeploy(dependsOn: installDist) {
	doLast {
		int nServers = 4
		int nClients = 1

		def fileSeparator = System.getProperty("file.separator")
		def src = project.buildDir.name + fileSeparator + "install" + fileSeparator + project.name
		def workingDirectory = project.buildDir.name + fileSeparator + "local" + fileSeparator

		println ("Deploying project into ${workingDirectory}")

		for (i in 0..<nServers) {
			def target = workingDirectory + "rep${i}"
			copy {
				from src
				into target
			}
		}

		for (i in 0..<nClients) {
			def target = workingDirectory + "cli${i}"
			copy {
				from src
				into target
			}
		}
	}
}

def setupIntegrationTestingEnvironment(nWorkers, workingDirectory) {
	println("Creating folders for ${nWorkers} workers")
	def fileSeparator = System.getProperty("file.separator")
	def src = project.buildDir.name + fileSeparator + "install" + fileSeparator + project.name
	copy {
		from src + fileSeparator + "lib"
		into workingDirectory + fileSeparator + "lib"
	}
	copy {
		from project.projectDir.absolutePath + fileSeparator + "config" + fileSeparator + "benchmark.config"
		into workingDirectory
	}

	for (i in 0..<nWorkers) {
		def target = workingDirectory + "worker${i}"
		copy {
			from src
			into target
		}
	}
}

task setupIntegrationTestingEnvironment(dependsOn: installDist) {
	doFirst {
		def f = 1
		def nWorkers = 3 * f + 2
		println("Creating folders for ${nWorkers} workers")
		def fileSeparator = System.getProperty("file.separator")
		def src = project.buildDir.name + fileSeparator + "install" + fileSeparator + project.name
		def workingDirectory = project.buildDir.name + fileSeparator + "integration" + fileSeparator
		copy {
			from src + fileSeparator + "lib"
			into workingDirectory + fileSeparator + "lib"
		}
		copy {
			from project.projectDir.absolutePath + fileSeparator + "config" + fileSeparator + "benchmark.config"
			into workingDirectory
		}

		for (i in 0..<nWorkers) {
			def target = workingDirectory + "worker${i}"
			copy {
				from src
				into target
			}
		}
	}
}

task runIntegrationTest(type: JavaExec, dependsOn: installDist) {
	int f = 1
	int nWorkers = 3 * f + 2;
	def fileSeparator = System.getProperty("file.separator")
	String workingDirectory = project.buildDir.absolutePath + fileSeparator + "integration" + fileSeparator
	doFirst {
		setupIntegrationTestingEnvironment(nWorkers, workingDirectory)
	}

	classpath = sourceSets.main.runtimeClasspath
	args(workingDirectory, project.getPath() + fileSeparator + "src", f, true)
	mainClass = 'bftsmart.tests.IntegrationTestsExecutor'
}

distributions {
	main {
		contents {
			into('config') {
				from 'config'
			}
			into('lib') {
				from jar
				from(configurations.runtimeClasspath)
			}
			from 'runscripts/smartrun.sh'
			from 'runscripts/smartrun.cmd'
		}
	}
}

tasks.withType(Javadoc) {
	failOnError false
	options.addStringOption('Xdoclint:none', '-quiet')
	options.addStringOption('encoding', 'UTF-8')
	options.addStringOption('charSet', 'UTF-8')
}

dependencies {
	implementation fileTree('lib'){include '*.jar'}
	// https://mvnrepository.com/artifact/org.bouncycastle/bcpkix-jdk15on
	implementation 'org.bouncycastle:bcpkix-jdk15on:1.69'

	// https://mvnrepository.com/artifact/org.bouncycastle/bcprov-jdk15on
	implementation 'org.bouncycastle:bcprov-jdk15on:1.69'

	// https://mvnrepository.com/artifact/commons-codec/commons-codec
	implementation 'commons-codec:commons-codec:1.15'

	// https://mvnrepository.com/artifact/ch.qos.logback/logback-core
	implementation 'ch.qos.logback:logback-core:1.2.5'

	// https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
	implementation 'ch.qos.logback:logback-classic:1.2.5'

	// https://mvnrepository.com/artifact/io.netty/netty-all
	implementation 'io.netty:netty-all:4.1.67.Final'

	// https://mvnrepository.com/artifact/org.slf4j/slf4j-api
	implementation 'org.slf4j:slf4j-api:1.7.32'
}
